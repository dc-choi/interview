/**
 * 타입 안정성에서의 불쾌한 골짜기는 피하자. 타입이 없는거 보다 잘못된 게 더 나쁨.
 * (전에 사용할 때는 너그럽게 생성할 때는 엄격하게와 같은 맥락)
 *
 * 정확하게 타입을 모델링 할 수 없다면, 부정확하게 모델링하지 말아야 한다.
 * any, unknown을 구분해서 사용해야 한다.
 */

/**
 * 백엔드에서 데이터를 정말 꽉 잡아야 하는 이유인거같다.
 * 프론트 입장에서 결국 데이터에 대한 예외적인 이슈가 발생할 수 있으므로 명세로부터 코드를 생성하는 것이 좋아보인다.
 *
 * 여기 나온 GraphQL에 대한 의식이 좀 더 좋아지는 거 같다...
 * 타입에 대한 안정성도 주는거 같고 스키마로 명세할 수 있다는 점이 편리한거 같다.
 *
 * 하지만... 데이터에 대한 이해도가 있는 프론트랑 사용했으면 좋겠다.
 */

/**
 * 해당 분야의 용어로 타입 이름 짓기
 *
 * 이 경우는 내가 속한 도메인을 잘 이해해야 하는 것으로 이해했다.
 * 결국 코딩의 본질은 현실을 가상세계로 녹여내는 것이라고 생각한다.
 *
 * 공식 명칭에는 상표를 붙이기
 *
 * TS가 명목적 타이핑을 사용하는 것이 아니라 구조적 타이핑을 쓰기에 나오게 된 개념.
 * 이 상표 기법을 사용하게 되면 타입 시스템에세도 런타임 오버헤드를 줄이면서 런타임에서 체크하는 것 같은 효과를 지닌다.
 */
